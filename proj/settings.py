"""
Django settings for proj project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from datetime import timedelta
from django.utils.translation import ugettext_lazy as _
from dotenv import load_dotenv
from corsheaders.defaults import default_headers, default_methods


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
load_dotenv(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']
I_AM_A_KIOSK = os.environ['I_AM_A_KIOSK'].lower().capitalize() == 'True'

I_CAN_MANAGE_KIOSKS = os.environ['I_CAN_MANAGE_KIOSKS'].lower().capitalize() == 'True'
PUBLIC_SCAN = os.environ['PUBLIC_SCAN'].lower().capitalize() == 'True'
URL_SCAN = os.environ['URL_SCAN'].lower().capitalize() == 'True'
CELERY_BROKER_URL = os.environ['CELERY_BROKER_URL']

assert CELERY_BROKER_URL.startswith('redis'), 'Only redis is supported as celery broker'

CELERY_RESULT_BACKEND = os.environ['CELERY_BROKER_URL']
CELERY_TASK_DEFAULT_QUEUE = os.environ['CELERY_TASK_DEFAULT_QUEUE']
CELERY_TIMEZONE = 'Asia/Tehran'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
# CELERY_TASK_IGNORE_RESULT = True
CELERY_RESULT_EXPIRES = timedelta(hours=1)
CELERY_TASK_ACKS_LATE = True
CELERYD_PREFETCH_MULTIPLIER = 1
CELERY_TASK_TRACK_STARTED = True
CELERY_RESULT_SERIALIZER = 'json'
MAX_FILE_SIZE = int(os.environ.setdefault('MAX_FILE_SIZE', '16777216'))
MAX_VIDEO_SIZE = int(os.environ.get('MAX_VIDEO_SIZE', '400000000'))
INTERFACES_PATH = os.environ['INTERFACES_PATH']
LOG_FILE_PATH = os.environ['LOG_FILE_PATH']
SYSLOG_FILE_PATH = os.environ.get('SYSLOG_FILE_PATH', 'syslog.log')
SAMBA_CONFIG_PATH = os.environ.get('SAMBA_CONFIG_PATH', '/etc/samba/smb.conf')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ['DEBUG'].lower().capitalize() == 'True'

ALLOWED_HOSTS = os.environ['ALLOWED_HOSTS'].split(',')

if DEBUG or os.environ['CORS_ORIGIN_WHITELIST'] == '*':
    CORS_ORIGIN_ALLOW_ALL = True
else:
    CORS_ORIGIN_WHITELIST = os.environ['CORS_ORIGIN_WHITELIST'].split(',')
    allowed_methods = list(default_methods)
    allowed_methods.remove('OPTIONS')
    CORS_ALLOW_METHODS = allowed_methods

CORS_ALLOW_HEADERS = list(default_headers) + [
    'x-captcha-key',
    'x-captcha-value',
    'x-api-key',
    'authorization-proxy',
    'x-api-key-proxy'
]


# Application definition

INSTALLED_APPS = [
    'applog',
    'core',
    'django_filters', # Third-party package, but it's placed here to
                      # workaround _DeadlockError exception!

    # Django built-in apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'corsheaders',
    'django_extensions',
    'drf_yasg',
    'rosetta',
    'rest_captcha',
    'django_celery_beat',

    # Local apps
    'users',
    'kiosks',
    'agents',
    'scans',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'proj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'proj.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': os.environ.get('DB_NAME', 'db.sqlite3'), # BASE_DIR / 'db.sqlite3'
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_default',
    },
    'session': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_session',
    },
    'captcha': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_captcha',
    },
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'session'
SESSION_COOKIE_AGE = \
    1209600 if DEBUG else int(os.environ.setdefault('SESSION_LIFETIME', '600'))


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Tehran'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [
    './locale/'
]

LANGUAGES = (
    ('en', _('English')),
    ('fa', _('Persian')),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

MEDIA_ROOT = os.environ.setdefault('MEDIA_ROOT', os.path.join(BASE_DIR, 'media'))
MEDIA_URL = '/media/'

AUTH_USER_MODEL = 'users.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'core.permissions.IsAdminUserOrHasAPIKey',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter'
    ),
    'DEFAULT_PAGINATION_CLASS': 'core.pagination.PageSizedPagination',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
}

if DEBUG:
    REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'] = (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )
else:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = [
        'rest_framework.renderers.JSONRenderer',
    ]

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(
        seconds=int(os.environ.setdefault('JWT_ACCESS_TOKEN_LIFETIME', '6000'))
    ),
    'REFRESH_TOKEN_LIFETIME': timedelta(
        seconds=int(os.environ.setdefault('JWT_REFRESH_TOKEN_LIFETIME', '60000'))
    ),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'username',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(
        seconds=int(os.environ.setdefault('JWT_ACCESS_TOKEN_LIFETIME', '60'))
    ),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(
        seconds=int(os.environ.setdefault('JWT_REFRESH_TOKEN_LIFETIME', '600'))
    ),
}

REST_CAPTCHA = {
    'CAPTCHA_CACHE': 'captcha',
    'CAPTCHA_TIMEOUT': 300,  # 5 minutes
    'CAPTCHA_CACHE_KEY': 'rest_captcha_{key}.{version}',
    'CAPTCHA_LENGTH': 4,
    'CAPTCHA_FONT_SIZE': 28,
    'CAPTCHA_IMAGE_SIZE': (135, 60),
    'CAPTCHA_LETTER_ROTATION': (-35, 35),
    'CAPTCHA_FOREGROUND_COLOR': '#001100',
    'CAPTCHA_BACKGROUND_COLOR': '#ffffff',
    'FILTER_FUNCTION': 'rest_captcha.captcha.filter_default',
    'NOISE_FUNCTION': 'rest_captcha.captcha.noise_default',
    # for tests access: MASTER_CAPTCHA: {'secret_key: secret_value'}
    'MASTER_CAPTCHA': {}
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Basic': {
            'type': 'basic'
        },
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        },
    },
    'JSON_EDITOR': True,
}

AUTHENTICATION_BACKENDS = [
    'core.auth_backend.CustomBackend',
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'root': {
        'handlers': ['http', 'file', 'syslog', 'db'],
        'level': 'INFO',
    },

    'formatters': {
        'standard_formatter': {
          'format': '%(asctime)s %(levelname)-8s %(name)-15s %(message)s',
          'datefmt': '%Y-%m-%d %H:%M:%S'
        }
    },

    'handlers': {
        'syslog_file': {
            'formatter': 'standard_formatter',
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': SYSLOG_FILE_PATH,
            'maxBytes': 10485760 # 10MB
        },
        'file': {
            'formatter': 'standard_formatter',
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE_PATH,
            'maxBytes': 10485760 # 10MB
        },
        'db': {
            'level': 'INFO',
            'class': 'applog.handlers.ModelHandler',
            'model': 'core.models.auditlog.AuditLog',
            'expiry': 86400,
            # 'formatter': 'verbose',
        },
        'http': {
            'level': 'INFO',
            'class': 'applog.handlers.HTTPHandler',
        },
        'syslog': {
            'level': 'INFO',
            'class': 'applog.handlers.SysLogHandler',
        },
    },
    'loggers': {
    #     'django': {
    #         'handlers': ['db', 'file', 'http', 'syslog'],
    #         # 'handlers': ['db', 'file', 'http'],
    #         'level': 'INFO',
    #         'propagate': False
    #     },
    #     'celery': {
    #         'handlers': ['db', 'file', 'http', 'syslog'],
    #         # 'handlers': ['db', 'file', 'http'],
    #         'level': 'INFO',
    #         'propagate': False
    #     },
        'gunicorn.error': {
            'level': 'INFO',
            'handlers': ['db', 'file', 'http', 'syslog'],
            'propagate': False
        },
        # 'gunicorn.access': {
        #     'level': 'INFO',
        #     'handlers': ['db'],
        # },
        'syslog': {
            'level': 'INFO',
            'handlers': ['syslog_file'],
            'propagate': False
        }
    }
}

CELERY_WORKER_HIJACK_ROOT_LOGGER = False

PRIVATE_KEY = os.environ['SECRET_KEY']
if len(PRIVATE_KEY) < 32:
    raise Exception('Secret key must be at least 32 characters long')
PRIVATE_KEY = PRIVATE_KEY[:32]
