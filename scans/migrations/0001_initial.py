# Generated by Django 3.2 on 2022-02-04 20:07

import core.fields
import core.mixins
import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import scans.models.file
import scans.models.scan


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('agents', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FileInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('size', models.FloatField(null=True)),
                ('md5', models.CharField(max_length=256)),
                ('sha1', models.CharField(max_length=256)),
                ('sha256', models.CharField(max_length=256)),
                ('ext_match', models.BooleanField(null=True)),
                ('extension', models.CharField(max_length=256)),
                ('mimetype', models.CharField(max_length=256)),
            ],
            options={
                'default_permissions': [],
            },
            bases=(models.Model, core.models.mixins.UpdateModelMixin),
        ),
        migrations.CreateModel(
            name='ScanReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', core.fields.SafeCharField(max_length=120)),
                ('excel_file', models.FileField(editable=False, upload_to=scans.models.scan.get_report_upload_path)),
                ('pdf_file', models.FileField(editable=False, upload_to=scans.models.scan.get_report_upload_path)),
                ('csv_file', models.FileField(editable=False, upload_to=scans.models.scan.get_report_upload_path)),
                ('status', models.CharField(choices=[('creating', 'Creating'), ('created', 'Created'), ('failed', 'Failed')], default='creating', editable=False, max_length=16)),
                ('error', models.CharField(blank=True, editable=False, max_length=4096)),
            ],
            options={
                'verbose_name': 'Scan Report',
                'verbose_name_plural': 'Scan Reports',
                'default_permissions': [],
            },
        ),
        migrations.CreateModel(
            name='TaskLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('session_id', models.CharField(db_index=True, max_length=64)),
                ('task_id', models.CharField(max_length=64)),
            ],
            options={
                'default_permissions': [],
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(max_length=32, null=True)),
                ('progress', models.FloatField(db_index=True, null=True)),
                ('total', models.PositiveSmallIntegerField(null=True)),
                ('counter', models.PositiveSmallIntegerField(null=True)),
                ('current_path', models.CharField(max_length=1024, null=True)),
                ('analyze_progress', models.FloatField(null=True)),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'default_permissions': ['view', 'delete'],
            },
            bases=(models.Model, core.mixins.AsyncMixin),
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(max_length=32, null=True)),
                ('display_name', models.CharField(max_length=256)),
                ('notes', models.TextField(blank=True)),
                ('status', models.CharField(blank=True, max_length=64)),
                ('valid', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('file', models.FileField(max_length=1024, null=True, upload_to=scans.models.file.get_file_upload_path)),
                ('client_username', core.fields.SafeCharField(blank=True, max_length=128, null=True)),
                ('client_file_name', core.fields.SafeCharField(blank=True, max_length=256, null=True)),
                ('progress', models.FloatField(db_index=True, editable=False, null=True)),
                ('infected', models.BooleanField(db_index=True, editable=False, null=True)),
                ('info', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='scans.fileinfo')),
                ('parent', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='scans.file')),
                ('session', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='scans.session')),
                ('user', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'File',
                'verbose_name_plural': 'Files',
                'permissions': [('cleanup', 'Can cleanup storage disk'), ('delete_files', 'Can delete multiple Files with session ID')],
            },
            bases=(models.Model, core.models.mixins.UpdateModelMixin, core.mixins.AsyncMixin),
        ),
        migrations.CreateModel(
            name='Scan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('av_name', core.fields.SafeCharField(max_length=128)),
                ('status_code', models.IntegerField(db_index=True, null=True)),
                ('stdout', models.TextField(blank=True)),
                ('scan_time', models.FloatField(null=True)),
                ('infected_num', models.IntegerField(db_index=True, null=True)),
                ('threats', models.CharField(max_length=512, null=True)),
                ('error', models.TextField(null=True)),
                ('agent', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scans', to='agents.agent')),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scans', to='scans.file')),
            ],
            options={
                'verbose_name': 'Scan',
                'verbose_name_plural': 'Scans',
                'permissions': [('view_stats', 'Can view scan stats'), ('view_compare', 'Can view comparing agents average scan time'), ('view_performance', 'Can view performance of an agent')],
                'default_permissions': ['view', 'delete'],
                'unique_together': {('agent', 'file')},
            },
            bases=(models.Model, core.models.mixins.UpdateModelMixin, core.mixins.AsyncMixin),
        ),
    ]
